---
- name: Setting up Endpoints Server FQDN
  set_fact:
    server_fqdn: "{{ ansible_nodename }}"
  when: server_fqdn is undefined

- name: Using the following Endpoints Server FQDN
  debug:
    msg: "Endpoints Server FQDN: {{ server_fqdn }}"

- name: Add MariaDB repository
  yum_repository:
    name: MariaDB
    description: MariaDB repository
    baseurl: "{{ mariadb_repo_url }}"
    gpgkey: "{{ mariadb_repo_gpg_key }}"
    gpgcheck: yes

- name: Ensure MariaDB repository on CentOS/RHEL 8 has 'module_hotfixes' option enabled
  ini_file:
    path: /etc/yum.repos.d/MariaDB.repo
    section: MariaDB
    option: module_hotfixes
    value: "1"
  when: ansible_distribution_major_version|int >= 8

- name: Add Endpoints repository
  yum_repository:
    name: kodo-endpoints
    description: Endpoints repo
    baseurl: "{{ kodo_repo }}"
    gpgcheck: no

- name: Install Endpoints Server and dependencies
  yum:
    name:
      - sbr-endpoints-server  
      - python3-PyMySQL
    state: present

- name: Start and enable MariaDB service
  service:
    name: mariadb
    daemon-reload: yes
    state: started
    enabled: yes

- name: Secure database
  import_tasks: secure_mariadb.yml

- name: List existing databases
  mysql_info:
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    filter:
      - databases
  register: db_list

- name: Initialize Endpoints Server
  shell: "{{ kodo_init_script_path }} --dbrootpassword {{ mariadb_root_password }}"
  when: "kodo_db_name not in db_list.databases"

- name: Start and enable Endpoints Server service
  service:
    name: sbr-endpoints-server
    daemon-reload: yes
    state: started
    enabled: yes

- name: Create staging directory
  file:
    state: directory
    path: "{{ kodo_staging_path }}"
    owner: "{{ kodo_user }}"
    group: "{{ kodo_user }}"
    mode: "0750"

- name: Start and enable firewalld service
  service:
    name: firewalld
    daemon-reload: yes
    state: started
    enabled: yes

- name: Firewall - open port 8181
  firewalld:
    port: 8181/tcp
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Firewall - redirect port 443 to 8181
  firewalld:
    rich_rule: "rule family=ipv4 forward-port port=443 protocol=tcp to-port=8181"
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Wait for the server to start
  uri:
    url: "https://{{ server_fqdn }}:8181/api/version"
    method: GET
    validate_certs: false
    return_content: true
  register: resp_version
  retries: 100
  delay: 5
  until: resp_version is not failed

- block:
  - name: Login to Kodo
    uri:
      url: "https://{{ server_fqdn }}:8181/api/admin/auth/login"
      method: POST
      body:
        username: "{{ kodo_kodoadmin_user }}"
        password: "k0do@dmin"
      validate_certs: false
      return_content: true
      body_format: json
    register: resp_login
  rescue:
  - name: Login to Kodo
    uri:
      url: "https://{{ server_fqdn }}:8181/api/admin/auth/login"
      method: POST
      body:
        username: "{{ kodo_kodoadmin_user }}"
        password: "{{ kodo_kodoadmin_pass }}"
      validate_certs: false
      return_content: true
      body_format: json
    register: resp_login

- set_fact:
    token: "{{ resp_login.json.token }}"

- name: Update general settings
  uri:
    url: "https://{{ server_fqdn }}:8181/api/admin/instance-settings/general"
    method: PUT
    body:
      allowedIpsForKodoAdmin: []
      deploymentServerName: "{{ server_fqdn }}"
    headers:
      Authorization: "Bearer {{ token }}"
    body_format: json
    status_code: 204
    validate_certs: false

- set_fact:
    isp_fqdn: "localhost"
  when: isp_fqdn == server_fqdn

- name: Update IBM Spectrum Protect settings
  uri:
    url: "https://{{ server_fqdn }}:8181/api/admin/instance-settings/tsm"
    method: PUT
    body:
      address: "{{ isp_fqdn }}"
      node: "{{ isp_service_node_name }}"
      port: "{{ isp_port|int }}"
      adminPort: "{{ isp_admin_port|int }}"
      useSsl: false
      collectDeduplicationStats: true
      nextExpireInventoryDate: "{{ ansible_date_time.epoch|int * 1000 }}"
      expireInventoryInterval: 21600000
      expireInventoryResource: 4
      fetchingDeduplicationStatsInterval: 0
    headers:
      Authorization: "Bearer {{ token }}"
    body_format: json
    status_code: 204
    validate_certs: false
  when: isp_fqdn is defined and isp_service_node_name is defined and isp_port is defined and isp_admin_port is defined

- name: Check ISP server's SSL certificate exists
  local_action: stat path=cert256.arm
  register: stat_isp_cert

- name: Configure SSL connection to the ISP server
  include_tasks: setup_ssl_connection_with_isp.yml
  when: stat_isp_cert.stat.exists

- name: Set IBM Spectrum Protect password
  uri:
    url: "https://{{ server_fqdn }}:8181/api/admin/instance-settings/tsm/password"
    method: PUT
    body:
      password: "{{ isp_service_node_password }}"
    headers:
      Authorization: "Bearer {{ token }}"
    body_format: json
    status_code: 204
    validate_certs: false
  when: isp_service_node_password is defined

- name: Set Kodo staging space path and free space warning threshold
  uri:
    url: "https://{{ server_fqdn }}:8181/api/admin/instance-settings/fsstorage"
    method: PUT
    body:
      stagingPath: "{{ kodo_staging_path }}"
      stagingFreeSpaceWarningThreshold: "{{ kodo_staging_free_space_warn_threshold }}"
    headers:
      Authorization: "Bearer {{ token }}"
    body_format: json
    status_code: 204
    validate_certs: false

- name: Get admin users
  uri:
    url: "https://{{ server_fqdn }}:8181/api/admin/admin-users"
    method: GET
    headers:
      Authorization: "Bearer {{ token }}"
    validate_certs: false
  register: resp_get_admin_users

- name: Get kodoadmin GUID
  set_fact:
    kodo_kodoadmin_guid: "{{ resp_get_admin_users.json | json_query('[?userName==`kodoadmin`]| [0].guid')}}"

- name: Set kodoadmin password
  uri:
    url: "https://{{ server_fqdn }}:8181/api/admin/admin-users/{{ kodo_kodoadmin_guid }}/password"
    method: PUT
    body:
      password: "{{ kodo_kodoadmin_pass }}"
    headers:
      Authorization: "Bearer {{ token }}"
    body_format: json
    status_code: 204
    validate_certs: false